this指向的一般说是当前函数的运行环境，但是我觉得也可以说是当前代码的运行环境，例如{}不是一个函数，但也有运行环境

函数有一般函数和箭头函数

一般的函数就是根据当前运行环境来，而箭头函数是根据定义的时候的环境来
ps:实际上，箭头函数没有this，它的this是捕获定义位置（所在上下文）的this来的，与其保持一致，与函数执行的位置无关

var f4 = () => {console.log(this)}
var obj = {
  f1: function(){
    f4()
  },
  f2: ()=>{console.log(this)},
  f3: f4,
}
var func = obj.f1
obj.f1() 
func()
// obj.f1()可以转换为obj.f1.call(obj) 即最后f1是在obj环境下运行的;
// 函数的执行如果能转换成call()的方式，就可以根据call的第一个参数来查看this的指向，但f1里的f4，这种就转不了，
// 是“xxx()”这种执行方式，因为没有指定的执行对象，所以默认f4是在window环境下执行，其this就代表window;
// 以obj.f1()为例，f4是定义在全局环境中也就window下，箭头函数的this来源于定义的位置的this，所以f4的this是window

obj.f2()
obj.f3()
// f2、f3都有有个箭头函数，其this为定义时所在上下文的this，与执行位置无关，虽然它们的箭头函数定义位置不同，f2的定义在obj里面，f3的定义在window下，但是obj的this指向window，所以它们输出结果一样
// f5里的箭头函数

